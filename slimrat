#!/usr/bin/env perl
#
# slimrat - main CLI script
#
# Copyright (c) 2008-2009 Přemek Vyhnal
# Copyright (c) 2009 Tim Besard
#
# This file is part of slimrat, an open-source Perl scripted
# command line and GUI utility for downloading files from
# several download providers.
# 
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# Authors:
#    Přemek Vyhnal <premysl.vyhnal gmail com> 
#    Tim Besard <tim-dot-besard-at-gmail-dot-com>
#


#
# Configuration
#

# Packages
use Getopt::Long;
use Data::Dumper;
use POSIX 'setsid';
use Term::ANSIColor qw(:constants);

# Find root for custom packages
use FindBin qw($RealBin);
use lib $RealBin;

# Custom packages
use Plugin;
use Toolbox;
use Queue;
use Log;

# Write nicely
use strict;
use warnings;

# Process command-line options
debug("processing command-line arguments");
my ($list, $link, @links, $check, @failedlinks, @oklinks, $download_to, $address, $wget_opts, $unpack, @pass, $daemon);
GetOptions (
		"help!"		=> \&usage,
		"check!"	=> \$check,
		"list=s"	=> \$list,
		"to=s"		=> \$download_to,
		"address=s"	=> \$address,
		"wget=s"	=> \$wget_opts,
		"unpack!"	=> \$unpack,
		"pass=s@"	=> \@pass,
		"daemon!"	=> \$daemon,
);
if(!scalar @ARGV && !$list) {
	error("no input URLs");
	print "\n";
	&usage;
}

# Execute configuration
debug("executing configuration");
our ($ccf, $ccs, $ccg);
do $RealBin."/config";

# Set socket local address if needed
if($address){
	no warnings; # avoid a "name used only once" warning
	push(@LWP::Protocol::http::EXTRA_SOCK_OPTS, LocalAddr => $address);
	$wget_opts .= " --bind-address='$address' ";
}

# Initialise a link queue
my $queue = new Queue();
$queue->file($list) if ($list);
$queue->add($link) while ($link = shift);

# Fork in background
if ($daemon){
	debug("becoming a daemon");
	daemonize();
	print "\n\n";
	$wget_opts .= " -q";	# avoid log file spam
	$wget_opts .= " -c";	# make wget continue if file exists
				# this is a temporary fix, because when slimrat receives a sig{int}
				# when downloading, wget will continue to download the file without
				# updating the urls-file. this can cause a file in the list to be
				# already downloaded, and to avoid wget redownload it we use this -c flag
}


#
# Main
#

info("Slimrat started");

# Check URL's
if($check) {
	my $urls_ref = $queue->dump();
	my @urls = @$urls_ref;
	foreach my $link (@urls) {
		my $status = check($link);
		if ($status>0) {print GREEN,  "[ALIVE] ", RESET;}
		elsif ($status<0) {print RED, "[DEAD]  ", RESET; }
		else {print GREEN, "[?]     ", RESET;}
		print YELLOW, $link, RESET, " (", Plugin::get_name($link), ")\n";
	}
}

# Download URL's
else {
 	$SIG{'INT'} = 'quit';
 	while (my $link = $queue->get()) {
 		info("Downloading ", $link);
 		
 		# Check the URL
		my $status = check($link);
		if ($status < 0){
			error("download failed (dead link)");
			$queue->update($link, "DEAD");
			next;
		} elsif ($status == 0) {
			warning("download failed (unknow reason)");
			next;
		}
 		
 		# Download the URL
		if (download($link)) {
			push @oklinks, $link;
			$queue->update($link, "DONE");

			# custom command on successful download
			system($ccs);

		} else {
			push @failedlinks, $link;

			# custom command on failed download
			system($ccf);
		}
	}

	# custom command after all downloads
	system($ccg);

	&quit;
}


#
# Routines
#

# Print the usage
sub usage {
	print 
"Usage: $0 [OPTION...] [LINK]...
Slimrat downloads files from several free download providers.

EXAMPLES:
   $0 http://rapidshare.com/files/012345678/somefile.xxx
   $0 -l urls.dat -d
		
OPTIONS:
  -h | --help              this help
  -d | --daemon            start as a daemon
  -l | --list   filename   load links from file (one per line)
  -c | --check             only check links, don't download them
  -t | --to     directory  destination directory (where to download)
  -a | --address host|ip   bind to specified address for download
  -w | --wget              wget options, enclosed in quotes
                           slimrat -w '--limit-rate=20k' -l file-list
";
	exit 0;
}

# Redirect check() call to the correct plugin
sub check {
	$link = shift;
	my $pluginname = Plugin::get_name($link);
	my $check = eval $pluginname."::check('$link')";
	$check ||=0;
	return $check;
}

# Redirect download() call to the correct plugin
sub download {
	$link = shift;

	my $pluginname = Plugin::get_name($link);

	my $fileurl = eval $pluginname."::download('$link')";
	if($fileurl){ 
		my $command = 'wget ' .
			"-U \"$useragent\" ".
			($wget_opts ? qq($wget_opts ) : '') .
			($download_to? " -P \"$download_to\" " : "") .
			" \"$fileurl\"";

		if(!system($command)){ #success
			print GREEN &ptime."File downloaded", RESET, "\n\n";
			return 1;
		} else { # wget failed
			print RED &ptime."Download failed\n\n";
			return 0;
		}
	} else { # get fileurl failed
		print RED &ptime."Plugin failed\n\n";
		return 0;
	}
}

# Quit the application
sub quit {
	if(scalar @oklinks){
		print GREEN, "\nDOWNLOADED:\n", RESET;
		print $_,"\n" foreach @oklinks;
		print "to '",YELLOW, $download_to, RESET, "'\n" if ($download_to);
	}
	if(scalar @failedlinks){
		print RED, "\nFAILED:\n", RESET;
		print $_,"\n" foreach @failedlinks;
	}
	info("Slimrat finished");
	
	# todo: kill any active wget instance
	
	# hard exit, for when &quit gets called out of sig{int}
	exit(0);
}

# Fork into the background
sub daemonize {
	chdir '/' or fatal("couldn't chdir to / ($!)");
	open STDIN, '/dev/null' or fatal("couldn't redirect input from /dev/null ($!)");
	if (! open STDOUT, '>>/var/log/slimrat.log') { 
		warning("couldn't redirect output to /var/log/slimrat.log ($!), going silent");
		open STDOUT, '>>/dev/null' or fatal("couldn't redirect output from /dev/null ($!)");;
	}
	defined(my $pid = fork) or fatal("couldn't fork ($!)");
	exit if $pid;
	setsid or fatal("couldn't start a new session ($!)");
	open STDERR, '>&STDOUT' or fatal("couldn't redirect STDERR to STDOUT ($!)");
}

__END__

Some documentation?
