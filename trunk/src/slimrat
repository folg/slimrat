#!/usr/bin/env perl
#
# slimrat - main CLI script
#
# Copyright (c) 2008-2009 Přemek Vyhnal
# Copyright (c) 2009 Tim Besard
#
# This file is part of slimrat, an open-source Perl scripted
# command line and GUI utility for downloading files from
# several download providers.
# 
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# Authors:
#    Přemek Vyhnal <premysl.vyhnal gmail com>
#    Tim Besard <tim-dot-besard-at-gmail-dot-com>
#



#################
# CONFIGURATION #
#################

#
# Dependancies
#

# Packages
use Getopt::Long;
use POSIX 'setsid';
use Pod::Usage;

# Find root for custom packages
use FindBin qw($RealBin);
use lib $RealBin;

# Custom packages
use Plugin;
use Toolbox;
use Queue;
use Log;
use Configuration;

# Write nicely
use strict;
use warnings;


#
# Essential stuff
#

# Register signals
$SIG{'INT'} = 'quit';

# Function prototypes
sub check($);
sub download($);
sub quit();
sub daemonize();
sub pid_save();
sub pid_read();

# Global variables
my ($link, @links, @failedlinks, @oklinks);

# Initialise configuration handler and configure default values
my $config = new Configuration;
$config->set_default("state_file", $ENV{HOME}."/.slimrat/pid");
$config->set_default("mode", "download");
$config->set_default("to", ".");

# Read configuration files (this section should contain the _only_ hard coded paths, except for default values)
if (-r "/etc/slimrat.conf") {
	$config->file_read("/etc/slimrat.conf");
}
if (-r $ENV{HOME}."/.slimrat/config") {
	$config->file_read($ENV{HOME}."/.slimrat/config");
}


#
# Command-line options
#

# NOTE: this is the only section where the %options hash should be used. After this, an appropriate action
#       should have been undertaken, or if the value is needed later on (e.g. the lists file) the value should
#       be added to the configuration handler. This makes it possible for some entries to originate at other
#       sources, e.g. the "daemonize" flag could be passed through CLI as well as being specified in /etc/slimrat.conf

# Process command-line options
Getopt::Long::Configure("pass_through");
my %options;
GetOptions (
		\%options,
		"help!",
		"man!",
		"check!",
		"list=s",
		"to=s",
		"address=s",
		"daemon!",
		"kill",
		"debug",
		"quiet",
);

# Give the usage or manual
if ($options{"man"}) {
	pod2usage(-verbose => 2);
	quit();
} elsif ($options{"help"}) {
	pod2usage(-verbose => 1);
	quit();
}

# Kill an instance if requested
if ($options{"kill"}) {
	if (my $pid = pid_read()) {
		if (kill 0, $pid) {
			info("Killing an active instance at PID $pid");
			kill 2, $pid;
		} else {
			warning("no running instance found");
		}
	} else {
		fatal("could not read state file");
	}
	quit();
}

# Mode (e.g. what slimrat should do)
$config->set("mode", "check") if ($options{"check"});

# Options we might use later on
$config->set("list", $options{"list"}) if ($options{"list"});
$config->set("daemon", 1) if ($options{"daemon"});
$config->set("address", $options{"address"}) if ($options{"address"});
$config->set("to", $options{"to"}) if ($options{"to"});
usage("cannot combine --debug with --quiet option") if ($options{"quiet"} && $options{"debug"});
$config->section("log")->set("verbosity", 2) if ($options{"quiet"});
$config->section("log")->set("verbosity", 5) if ($options{"debug"});


#
# Apply configuration
#

# Configure the output
Log::configure($config->section("log"));

# Configure the plugin producer
Plugin::configure($config);

# Make sure slimrat has a proper directory in the users home folder
if (! -d $ENV{HOME}."/.slimrat") {
	debug("creating directory " . $ENV{HOME} . "/.slimrat");
	unless (mkdir $ENV{HOME}."/.slimrat") {
		fatal("could not create slimrat's home directory");
	}
}

# Check if we got input files (if certain mode does not require those, prepend those checks _before_ this conditional)
if (!scalar @ARGV && !$config->get("list")) {
	usage("no input URLs");
}

# Initialise a link queue
my $queue = new Queue();
while ($link = shift) {
	if ($link =~ /^\w+:\/\//) {
		$queue->add($link);
	} else {
		usage("unrecognised option \"$link\"");
	}
}
$queue->file($config->get("list")) if ($config->get("list"));

# Set socket local address if needed
if($config->get("address")){
	no warnings;
	push(@LWP::Protocol::http::EXTRA_SOCK_OPTS, LocalAddr => $options{"address"});
}

# Fork in background
if ($config->get("daemon")) {
	info("Forking in background");
	daemonize();
	print "\n\n";
}



########
# MAIN #
########

info("Slimrat started");

#
# Check
#

if ($config->get("mode") eq "check") {
	info("Checking URLs");
	
	# Get and loop all URLs
	my $urls_ref = $queue->dump();
	my @urls = @$urls_ref;
	foreach my $link (@urls) {
		# Load plugin
		my $plugin;
		unless ($plugin = Plugin->new($link)) {
			status($link, 0, "plugin failure");
		}
		else {			
			# Check status
			my $status = $plugin->check();
			status($link, $status,  ($plugin->get_filename()||"unknown filename") . ", " . ($plugin->get_filesize()||"unknown filesize"));
		}
	}
	
	quit();
}


#
# Download
#

elsif ($config->get("mode") eq "download") {
 	while (my $link = $queue->get()) {
 		info("Downloading ", $link);
 		
 		# Download the URL and check the result
 		my $failure = 0;
		my $result = download($link);
		if ($result > 0) {
			push @oklinks, $link;
			$queue->file_update($link, "DONE");

			# Command after successful download
			if (my $command = $config->get("post_download")) {
				system($command);
			}
		}
		elsif ($result == 0) {
			$failure = 1;
		}
		elsif ($result == -1) {
			$failure = 1;
			$queue->file_update($link, "DEAD");
		}
		
		# Failure?
		if ($failure) {
			push @failedlinks, $link;

			# Command after failed download
			if (my $command = $config->get("post_failure")) {
				system($command);
			}
		}
		
		# Advance to the next URL
		$queue->advance();
	}

	# Command after all downloads
	if (my $command = $config->get("post_all")) {
		system($command);
	}

	quit();
}


#
# Other
#

else {
	usage("unrecognised mode");
	quit();
}



############
# ROUTINES #
############

# Redirect download() call to the correct plugin
sub download($) {
	$link = shift;
	
	# Load plugin
	my $plugin = Plugin->new($link) || return 0;
	my $pluginname = $plugin->get_name();
	debug("downloading \"$link\" using the $pluginname-plugin");
	
	# Check if link is valid
	my $status = $plugin->check();
	if ($status < 0){
		error("check failed (dead link)");
		return $status;
	}
	elsif ($status == 0) {
		warning("check failed (unknown reason)");
		return $status;
	}
	
	# Get destination filename
	my $filename = $plugin->get_filename() || return error("could not deduce output filename");
	my $filepath = $config->get("to") . "\/$filename";
	debug("file will be saved as \"$filepath\"");
	
	# Check if exists
	if (-e $filepath) {
		warning("file exists, renaming");
		rename($filepath, "$filepath.old");
	}
	
	# Download status counters
	my $size;
	my $t_start = time;
	my $t_prev = 0;
	my $size_downloaded = 0;
	
	# Get data
	my $flag = 0;
	$|++; # unbuffered output
	$plugin->get_data( sub {	# TODO: catch errors
		# Fetch server response
		my $res = $_[1];
		
		# Do one-time stuff
		unless ($flag) {
			# Save length and print
			$size = $res->content_length;
			if ($size)
			{
				info("Filesize: ", bytes_readable($size));
			} else {
				info("Filesize unknown");
			}
			
			# Open file
			open(FILE, ">$filepath");
			unless (-w FILE) {
				error("could not open file to write");
				return 0;
			}
			binmode FILE;
			
			$flag = 1;
		}
		
		# Write the data
		print FILE $_[0];
		
		# Download indication
		$size_downloaded += length($_[0]);	
		if ($t_prev+1 < time) {	# don't update too often
			$t_prev = time;
			progress($size_downloaded, $size, 0);
		}
	});
	if ($size) {
		progress(1, 1, 0);
	} else {
		progress($size_downloaded, 0, 0);
	}
	print "\r\n";
	
	# Close file
	close(FILE);
	
	# Download finished
	info("File downloaded");
	return 1;
}

# Finish
sub quit() {
	# Print a download summary
	summary(\@oklinks, \@failedlinks);
	
	# Write the dump
	dump_write();
	
	# Hard exit, for when &quit gets called out of sig{int}	
	info("Slimrat finished");
	exit(0);
}

# Fork into the background
sub daemonize() {
	# Check current instances
	if (my $pidr = pid_read()) {
		if ($pidr && kill 0, $pidr) {	# Signal 0 doesn't do any harm
			fatal("an instance already seems to be running, please specify an alternative state file for this instance");
		}
	} else {
		warning("could not query state file to check for existing instances (harmless at first run)");
	}
	
	# Regular daemon householding
	chdir '/' or fatal("couldn't chdir to / ($!)");
	open STDIN, '/dev/null' or fatal("couldn't redirect input from /dev/null ($!)");
	
	# Create a child
	defined(my $pid = fork) or fatal("couldn't fork ($!)");
	exit if $pid;
	debug("child has been forked off at PID $$");
	
	# Start a new session
	setsid or fatal("couldn't start a new session ($!)");
	
	# Save the PID
	if (!pid_save()) {
		fatal("could not write the state file");
	}
	
	# Redirect all output
	info("Muting screen output, make sure a logfile has been configured to output to");
	$config->section("log")->set("screen", 0);
}

# Save the PID
sub pid_save() {
	my $state_file = $config->get("state_file");
	open(WRITE, ">$state_file") || return 0;	# Open and check existance
	return 0 unless (-w WRITE);			# Check write access
	print WRITE $$;
	close(WRITE);
	return 1;
}

# Extract an PID
sub pid_read() {
	# Check existance and read access
	my $state_file = $config->get("state_file");
	return 0 unless (-f $state_file && -r $state_file);
	
	# Read PID
	open(PIDR, $state_file);
	my $pid = <PIDR> || return 0;
	close(PIDR);
	
	return 0 if ($pid !~ /^\d+$/);	
	return $pid;
}

__END__

# Print the usage

=head1 NAME

slimrat-cli

=head1 VERSION

0.9.6-trunk

=head1 DESCRIPTION

  Command-line download manager, capable of downloading files from
  several free download providers

=head1 SYNOPSIS

  slimrat [OPTION...] [LINK]...

=head1 OPTIONS

=over 8

=item B<--help>

  Prints a summary how to use the client.

=item B<--man>

  Prints a manual how to use the client.

=item B<--daemon>

  Makes slimrat work in the background, by properly forking and redirecting
  the output to a specified logfile. Only one file can be backgrounded at a
  time, to support multiple instances you'll need to specify differend
  state files to save the instances PID in.

=item B<--kill>

  Kills a single active client, by looking up the PID in a predefined state file.

=item B<--list>

  Uses te given file as a queue-file containing URLs.

=item B<--check>

  Do not download the loaded URLs, just check them.

=item B<--to>

  Specifies the target directory for the downloaded files.

=item B<--address>

  Makes the download client bind to a specific address.

=item B<--debug>

  Enables maximal verbosity, which includes a lot of text on the screen and the generation
  of an additional dump archive.

=item B<--quiet>

  Makes slimrat less verbose, only displaying errors and warnings.

=back

=head1 EXAMPLES

  slimrat http://rapidshare.com/files/012345678/somefile.xxx
  slimrat -l urls.dat -d

=cut

