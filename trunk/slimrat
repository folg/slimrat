#!/usr/bin/env perl
#
# slimrat - main CLI script
#
# Copyright (c) 2008-2009 Přemek Vyhnal
# Copyright (c) 2009 Tim Besard
#
# This file is part of slimrat, an open-source Perl scripted
# command line and GUI utility for downloading files from
# several download providers.
# 
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# Authors:
#    Přemek Vyhnal <premysl.vyhnal gmail com> 
#    Tim Besard <tim-dot-besard-at-gmail-dot-com>
#


#
# Configuration
#

# Packages
use Getopt::Long;
use POSIX 'setsid';
use Term::ANSIColor qw(:constants);

# Find root for custom packages
use FindBin qw($RealBin);
use lib $RealBin;

# Custom packages
use Plugin;
use Toolbox;
use Queue;
use Log;

# Write nicely
use strict;
use warnings;

# Function prototypes
sub usage();
sub check($);
sub download($);
sub quit();
sub daemonize();
sub pid_save();
sub pid_read();

# Global variables
my ($link, @links, @failedlinks, @oklinks);

# Process command-line options
Getopt::Long::Configure("pass_through");
debug("processing command-line arguments");
my %options;
GetOptions (
		\%options,
		"help!",
		"check!",
		"list=s",
		"to=s",
		"address=s",
		"wget=s",
		"daemon!",
		"kill",
		"verbose",
		"quiet",
);

# Give the usage
if ($options{"usage"}) {
	usage();
	quit();
}

# Kill an instance if requested
if ($options{"kill"}) {
	debug("querying state file for an instance to kill");
	if (my $pid = pid_read()) {
		if (kill 0, $pid) {
			info("killing an active instance at PID $pid");
			kill $pid, 2;
		} else {
			warning("no running instance found");
		}
	} else {
		fatal("could not read state file");
	}
	quit();
}

# Check if we got input files (if certain mode does not require those, prepend those checks _before_ this conditional)
if(!scalar @ARGV && !$options{"list"}) {
	usage();
	fatal("no input URLs");
}

# Initialise a link queue
my $queue = new Queue();
while ($link = shift) {
	if ($link =~ /^\w+:\/\//) {
		$queue->add($link);
	} else {
		fatal("unrecognised option \"$link\"");
	}
}
$queue->file($options{"list"}) if ($options{"list"});

# Apply output level settings
if ($options{"quiet"} && $options{"verbose"}) {
	fatal("cannot combine --verbose with --quiet option");
}
elsif ($options{"quiet"}) {
	level(2);
}
elsif ($options{"verbose"}) {
	level(4);
}

# Execute configuration
debug("executing configuration");
our ($ccf, $ccs, $ccg);
do $RealBin."/config";

# Set socket local address if needed
if($options{"address"}){
	no warnings; # avoid a "name used only once" warning
	push(@LWP::Protocol::http::EXTRA_SOCK_OPTS, LocalAddr => $options{"address"});
	$options{"wget"} .= " --bind-address='".$options{"address"}."' ";
}

# Fork in background
if ($options{"daemon"}) {
	debug("becoming a daemon");
	daemonize();
	print "\n\n";
	$options{"wget"} .= " -q";	# avoid log file spam
	$options{"wget"} .= " -c";	# make wget continue if file exists
				# this is a temporary fix, because when slimrat receives a sig{int}
				# when downloading, wget will continue to download the file without
				# updating the urls-file. this can cause a file in the list to be
				# already downloaded, and to avoid wget redownload it we use this -c flag
}


#
# Main
#

info("Slimrat started");

# Check URL's
if($options{"check"}) {
	my $urls_ref = $queue->dump();
	my @urls = @$urls_ref;
	foreach my $link (@urls) {
		my $status = check($link);
		if ($status>0) {print GREEN,  "[ALIVE] ", RESET;}
		elsif ($status<0) {print RED, "[DEAD]  ", RESET; }
		else {print GREEN, "[?]     ", RESET;}
		print YELLOW, $link, RESET, " (", Plugin::get_name($link), ")\n";
	}
}

# Download URL's
else {
 	$SIG{'INT'} = 'quit';
 	while (my $link = $queue->get()) {
 		info("Downloading ", $link);
 		my $failure = 0;
 		
 		# Check the URL
		my $status = check($link);
		if ($status < 0){
			error("download failed (dead link)");
			$queue->file_update($link, "DEAD");
			$failure = 1;
		}
		elsif ($status == 0) {
			warning("download failed (unknow reason)");
			$failure = 1;
		}
 		
 		# Download the URL
	 	elsif ($status == 1) {
			if (download($link)) {
				push @oklinks, $link;
				$queue->file_update($link, "DONE");

				# custom command on successful download
				system($ccs);

			} else {
				$failure = 1;
			}
		}
		
		# Failure?
		if ($failure) {
			push @failedlinks, $link;
			
			# custom command on failed download
			system($ccf);
		}
		
		# Advance to the next URL
		$queue->advance();
	}

	# custom command after all downloads
	system($ccg);

	&quit;
}


#
# Routines
#

# Print the usage
sub usage() {
	print 
"Usage: $0 [OPTION...] [LINK]...
Slimrat downloads files from several free download providers.

EXAMPLES:
   $0 http://rapidshare.com/files/012345678/somefile.xxx
   $0 -l urls.dat -d
		
OPTIONS:
  -h | --help              this help
  -d | --daemon            start as a daemon
  -k | --kill              kill a single active instance
  -l | --list   filename   load links from file (one per line)
  -c | --check             only check links, don't download them
  -t | --to     directory  destination directory (where to download)
  -a | --address host|ip   bind to specified address for download
  -w | --wget              wget options, enclosed in quotes
                           slimrat -w '--limit-rate=20k' -l file-list
  -v | --verbose           print debug messages
  -q | --quiet             be quiet (only warnings and errors)

";
}

# Redirect check() call to the correct plugin
sub check($) {
	$link = shift;
	my $pluginname = Plugin::get_name($link);
	my $status = eval $pluginname."::check('$link')";
	$status ||= 0;
	return $status;
}

# Redirect download() call to the correct plugin
sub download($) {
	$link = shift;

	my $pluginname = Plugin::get_name($link);

	my $fileurl = eval $pluginname."::download('$link')";
	if($fileurl){ 
		my $command = 'wget ' .
			"-U \"$useragent\" ".
			($options{"wget"} ? qq($options{"wget"} ) : '') .
			($options{"to"}? " -P \"".$options{"to"}."\" " : "") .
			" \"$fileurl\"";

		if(!system($command)){ #success
			info("file downloaded");
			return 1;
		} else { # wget failed
			error("download failed");
			return 0;
		}
	} else { # get fileurl failed
		error("plugin failed");
		return 0;
	}
}

# Finish
sub quit() {
	if(scalar @oklinks){
		print GREEN, "\nDOWNLOADED:\n", RESET;
		print $_,"\n" foreach @oklinks;
		print "to '",YELLOW, $options{"to"}, RESET, "'\n" if ($options{"to"});
	}
	if(scalar @failedlinks){
		print RED, "\nFAILED:\n", RESET;
		print $_,"\n" foreach @failedlinks;
	}
	info("Slimrat finished");
	
	# todo: kill any active wget instance
	
	# hard exit, for when &quit gets called out of sig{int}
	exit(0);
}

# Fork into the background
sub daemonize() {
	# Check current instances
	if (my $pidr = pid_read()) {
		if ($pidr && kill 0, $pidr) {	# Signal 0 doesn't do any harm
			warning("an instance already seems to be running, you will not be able to kill _this_ instance through slimrat's kill switch");
		}
	} else {
		warning("could not query state file to check for existing instances (harmless at first run)");
	}
	
	# Regular daemon householding
	chdir '/' or fatal("couldn't chdir to / ($!)");
	open STDIN, '/dev/null' or fatal("couldn't redirect input from /dev/null ($!)");
	
	# Create a chile
	defined(my $pid = fork) or fatal("couldn't fork ($!)");
	exit if $pid;
	debug("child has been forked off at PID $$");
	
	# Start a new session
	setsid or fatal("couldn't start a new session ($!)");
	
	# Save the PID
	if (!pid_save()) {
		warning("could not write the state file -- slimrat's kill switch won't work on this instance"); # Will enter the log upon failure
	}
	
	# Redirect all output
	if (! open STDOUT, '>>/var/log/slimrat.log') { 
		warning("couldn't redirect output to /var/log/slimrat.log ($!), going silent");
		open STDOUT, '>>/dev/null' or fatal("couldn't redirect output from /dev/null ($!)");;
	}
	open STDERR, '>&STDOUT' or fatal("couldn't redirect STDERR to STDOUT ($!)");
	
}

# Save the PID
sub pid_save() {
	open(WRITE, ">/var/run/slimrat.pid") || return 0;	# Open and check existance
	return 0 unless (-w WRITE);	# Check write access
	print WRITE $$;
	close(WRITE);
	return 1;
}

# Extract an PID
sub pid_read() {
	# Check existance and read access
	return 0 unless (-f "/var/run/slimrat.pid" && -r "/var/run/slimrat.pid");
	
	# Read PID
	open(PIDR, "/var/run/slimrat.pid");
	my $pid = <PIDR> || return 0;
	close(PIDR);
	
	return 0 if ($pid !~ /^\d+$/);	
	return $pid;
}

__END__

Some documentation?
