#!/usr/bin/env perl
#
# slimrat - main GUI script
#
# Copyright (c) 2008-2009 Přemek Vyhnal
# Copyright (c) 2009 Tim Besard
#
# This file is part of slimrat, an open-source Perl scripted
# command line and GUI utility for downloading files from
# several download providers.
# 
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# Authors:
#    Přemek Vyhnal <premysl.vyhnal gmail com>
#    Tim Besard <tim-dot-besard-at-gmail-dot-com>
#

#################
# CONFIGURATION #
#################

#
# Dependancies
#

# Packages
use Gtk2 -init;
use Gtk2::GladeXML;
use Glib qw(TRUE FALSE);
use Gtk2 qw/-init -threads-init/;
use Gtk2::SimpleList;
use File::Basename;
use threads;
use threads::shared;

# Find root for custom packages
use FindBin qw($RealBin);
use lib $RealBin;

# Custom packages
use Common;
use Clipboard;
use Plugin;
use Toolbox;
use Log; 
use Configuration;
use Queue;

# Write nicely
use warnings;
use strict;


#
# Essential stuff
#

# Global variables
my $ctrl;
my $die:shared=0;
my $download_thread;
my $check_thread;

# Register signals
$SIG{'INT'} = 'quit';

# Initialise configuration
config_readfiles();
&config_gui->set_default("queue_file",  $ENV{HOME}.'/.slimrat/queue');
my $glade_file = $RealBin.'/slimrat.glade';


#
# Apply configuration
#

# Configure other packages and stuff
config_other();



#######
# GUI #
#######

# Keypresses
use constant KEY_CTRL	=> 65507;
use constant KEY_v	=> 118;
use constant KEY_V	=> 86;
use constant KEY_DELETE	=> 65535;
use constant KEY_INSERT	=> 65379;
use constant KEY_ENTER	=> 65293;

# Construct the GUI
Glib::Object->set_threadsafe (TRUE);
my $gui = Gtk2::GladeXML->new($glade_file, 'mainWindow');
$gui->signal_autoconnect_from_package('main');

# Treeview
use constant { # same order as in 'Configure the listview'
	COL_PROGR	=> 0,
	COL_STATUS	=> 1,
	COL_TYPE	=> 2,
	COL_LINK	=> 3,
	COL_FNAME	=> 4,
	COL_FSIZE	=> 5,
};

Gtk2::SimpleList->add_column_type(
		'progress', 
		type     => 'Glib::Int',
		renderer => 'Gtk2::CellRendererProgress',
		attr     => sub {
			my ($treecol, $cell, $model, $iter, $col_num) = @_;
			my $info = $model->get ($iter, $col_num);
			if ($info==-2) {$cell->set (text => "", value=>0);}
			elsif ($info==-1){$cell->set (text => "?", value=>0);}
			else          {$cell->set (text => "$info %", value=>$info);}
		}
);

# Configure the listview
my $slist = Gtk2::SimpleList->new(
	'Progress'	=> 'progress',
	'S'			=> 'pixbuf',
	'Type'		=> 'text',
	'Link'		=> 'text',
	'Filename'	=> 'text',
	'Size'		=> 'text',
);

$slist->get_selection->set_mode ('multiple');
$slist->get_column($_)->set_resizable(1) foreach (COL_PROGR, COL_STATUS, COL_TYPE, COL_LINK, COL_FNAME, COL_FSIZE);
$slist->get_column($_)->set_reorderable(1) foreach (COL_PROGR, COL_STATUS, COL_TYPE, COL_LINK, COL_FNAME, COL_FSIZE);
$slist->set_column_editable ($_, TRUE) foreach (COL_LINK);
$slist->set_search_column(COL_LINK);
$slist->set_search_equal_func(sub { # search (as-you-type) links in the list not only at the beginning of the string but also in the middle of the string
	my($store,$col,$pat,$iter)=@_;
	return $store->get($iter,$col) !~ m/\Q$pat\E/i;
});

# set "Download to" default from config
$gui->get_widget('downto')->set_filename(&config_gui->get("to")) if (&config_gui->get("to"));

$gui->get_widget('mainwin')->add_with_viewport($slist);
$gui->get_widget('mainwin')->show_all;


# Load queue'd URLs
my $queue;
$queue = Queue::new(&config_gui->get("queue_file"));
while ($_ = $queue->get){
	my @newRow;
	$newRow[COL_PROGR] = -2;
	$newRow[COL_STATUS] = $slist->render_icon ("gtk-dialog-question", 'menu');
	$newRow[COL_TYPE] = Plugin::get_package($_)->get_name();
	$newRow[COL_LINK] = $_;
	push @{$slist->{data}},[@newRow];
	$queue->advance();
}


# Activate the GUI
$gui->get_widget('statusbar')->push(0,"Slimrat is ready");
Gtk2->main;



############
# ROUTINES #
############

#
# Essential stuff
#

# Window got destroyed 
sub on_mainWindow_destroy { &quit; }

# Quit the application
sub quit {
	# Save the queue
	$queue->reset();
	$queue->add(@{$_}[COL_LINK]) foreach @{$slist->{data}};
	$queue->save(&config_gui->get("queue_file"));
	
	# Join back all threads and exit the GUI
	$_->join() foreach (threads->list(threads::joinable));
	$_->detach() foreach (threads->list(threads::running));
	Gtk2->main_quit;
	
	my $return = shift;
	$return = 255 if ($return !~ /^\d+$/);
	# Hard exit, for when &quit gets called out of sig{int}
	exit($return);
}

# Parse links from text input or clipboard and add them
sub links_parse_add {
	my $links = shift;
	foreach (split (/\n+/, $links)) {
		# remove spaces from beginning and end
		s/^\s+//;
		s/\s+$//;
		my @newRow;
		$newRow[COL_PROGR] = -2;
		$newRow[COL_STATUS] = $slist->render_icon ("gtk-dialog-question", 'menu');
		$newRow[COL_TYPE] = Plugin::get_package($_)->get_name();
		$newRow[COL_LINK] = $_;
		push @{$slist->{data}},[@newRow];
		$queue->add($_);
	}

}

# Moving treeview items
sub move_item {
	my($from,$to) = @_;
	return if($to<0 || $to >= scalar @{$slist->{data}});
	splice @{$slist->{data}}, $to, 0, splice @{$slist->{data}}, $from, 1; 
	$slist->unselect($from);
	$slist->select($to);
}

# Select all
sub select_all {
	$slist->select($_) foreach (0 .. (scalar @{$slist->{data}})-1);
}


#
# Key handling
#

# Keypress handler
sub key_press {
	my ($cmdbox, $event)=@_;
	if($event->keyval==KEY_CTRL){$ctrl = 1;}
	elsif($ctrl && ($event->keyval==KEY_v || $event->keyval==KEY_V)){&on_btnAddClip_clicked;}
	elsif($event->keyval==KEY_DELETE){&on_btnRemove1_clicked;}
	elsif($event->keyval==KEY_INSERT){&on_btnAdd1_clicked;}
}

# Keyrelease handler
sub key_release {
	my ($cmdbox, $event)=@_;
	if($event->keyval==KEY_CTRL) {$ctrl = 0;}
}

# Keypress handler within a dialog
sub on_addDialog_key_press_event {
	my ($cmdbox, $event)=@_;
	if($event->keyval==KEY_CTRL){$ctrl = 1;}
	&on_addOkBtn_clicked if($ctrl && $event->keyval==KEY_ENTER);
}

# Keyrelease handler within a dialog
sub on_addDialog_key_release_event {goto &key_release;}


#
# Toolbar
#

# Start download
sub on_btnStart1_clicked {
	my $button = shift;
	if($button->get_active) {
		my $download_to = $gui->get_widget('downto')->get_filename();

		$download_thread = threads->new(sub{
			for(my $rownum = 0; $rownum < scalar @{$slist->{data}}; $rownum++) {
				my $row = @{$slist->{data}}[$rownum];
				next if(@{$row}[COL_PROGR] >= 100);

				my $link = @{$row}[COL_LINK];
				$row->[COL_PROGR] = 0;

				$gui->get_widget('statusbar')->push(1,"Downloading $link");

				my $result = download(
						$link,
						$download_to,
						sub { # progress
							my ($done, $total, $time) = @_;
							if ($total) {
								my $perc = int(($done / $total)*10000)/100;
								$row->[COL_PROGR] = $perc; # progressbar isn't updated when window is not active or cursor is not moving
								progress("Downloaded: ", $perc, "%      ");
							} else {
								$row->[COL_PROGR] = -1; # TODO show size downloaded
								progress("Downloaded ", bytes_readable($done)."      ");
							}
						},
						sub { # captcha
							my $captchafile = shift;
							my $captcha;

							my $gui = Gtk2::GladeXML->new($glade_file, 'captchaDialog');
							$gui->signal_autoconnect_from_package('main');
							my $captcha_dialog = $gui->get_widget('captchaDialog');

							my $cptsub =  sub {
								$captcha = shift;
								$captcha_dialog->destroy();
								1;
							};

							$captcha_dialog->signal_connect ( delete_event => sub { &$cptsub(0); } ); 
							$gui->get_widget('captchaBtnCancel')->signal_connect ( clicked => sub { &$cptsub(0); } ); 
							$gui->get_widget('captchaBtnOk')->signal_connect ( clicked => sub { &$cptsub($gui->get_widget('captchaTxt')->get_text); } ); 
							$gui->get_widget('captchaTxt')->signal_connect ( activate => sub { &$cptsub($gui->get_widget('captchaTxt')->get_text); } ); 

							$gui->get_widget('captchaImage')->set_from_file($captchafile);

							while(! defined $captcha){
								sleep 1; # hmm...
							}

							return $captcha;
						}
				);
				
				$gui->get_widget('statusbar')->pop(1);

				if($die){
					$die=0;
					$rownum = scalar @{$slist->{data}} # this is last loop (last file)
				}

			}

			$button->set_active(0);
			threads->detach();

		},
#	\$slist, $download_to
		);

	} else { # download switched off
		$die=1;
	}
}



# Check selected URLs
# if no link selected, check all
# DEAD links will remain SELECTED (do we want this? or do we want to keep the selection?)
sub on_btnCheck_clicked {
	my $button = shift;
	#$button->set_state('insensitive');

	select_all() if(scalar $slist->get_selected_indices == 0);

	$check_thread = threads->new(sub{

		foreach my $rownum ($slist->get_selected_indices){
			my $row = @{$slist->{data}}[$rownum];
			my $link = @{$row}[COL_LINK];
			$gui->get_widget('statusbar')->push(2,"Checking $link");

			# Load plugin
			my $plugin;
			my $check = 0;
			if ($plugin = Plugin->new($link, $mech)) {
				# Check status
				$check = $plugin->check();
			}
			my $ico;
			if ($check>0) { #live
				$ico="gtk-yes";
				$slist->unselect($rownum);

				$row->[COL_FNAME] = $plugin->get_filename() || "";
				my $size = $plugin->get_filesize();
				$row->[COL_FSIZE] = ($size ? bytes_readable($size) : "?");

			} elsif ($check<0) { # dead
				$ico="gtk-no";
				$slist->select($rownum);
			} else { #?
				$ico="gtk-dialog-question";
				$slist->unselect($rownum);
			}
			$row->[COL_STATUS] = $slist->render_icon ($ico, 'menu');

			$gui->get_widget('statusbar')->pop(2);
		}

		$gui->get_widget('btnCheck')->set_state('active'); # FIXME 
		threads->detach();

	});
}

# Add from clipboard
sub on_btnAddClip_clicked {
	links_parse_add(Clipboard->paste);
}


#
# Add dialog
#

# Add
my ($addDialog, $addDialogBuff);
sub on_btnAdd1_clicked {
	my $gui = Gtk2::GladeXML->new($glade_file, 'addDialog');
	$gui->signal_autoconnect_from_package('main');
	$addDialog = $gui->get_widget('addDialog');
	$addDialogBuff = $gui->get_widget('addLinks')->get_buffer();
}

# Add dialog cancel button
sub on_addCancelBtn_clicked {
	$addDialog->destroy();	
}

# Add dialog OK button
sub on_addOkBtn_clicked {
	links_parse_add($addDialogBuff->get_text($addDialogBuff->get_start_iter, $addDialogBuff->get_end_iter, FALSE));
	$addDialog->destroy();	
}

# Remove
sub on_btnRemove1_clicked {
	my $dialog = Gtk2::MessageDialog->new (
			$gui->get_widget('mainWindow'),
			'destroy-with-parent',
			'question', # message type
			'yes-no', # which set of buttons?
			"Do you really want to delete selected items from the list?");
	$dialog->set_default_response ('yes');

	my $response = $dialog->run;
	if ($response eq 'yes') {
		my $i=0;
		splice (@{$slist->{data}}, $_- $i++, 1) foreach ($slist->get_selected_indices);
	}
	$dialog->destroy;
}

# Remove all
sub on_btnRemoveAll_clicked{
	select_all();
	&on_btnRemove1_clicked;
}

# Move to top
sub on_btnBeg1_clicked{
	my $i=0;
	move_item($_,$i++) foreach ($slist->get_selected_indices);
}

# Move up
sub on_btnUp1_clicked{
	return if (grep($_-1<0,$slist->get_selected_indices));
	move_item($_, $_-1) foreach ($slist->get_selected_indices);
}

# Move down
sub on_btnDown1_clicked{
	return if (grep($_+1>=scalar @{$slist->{data}},$slist->get_selected_indices));
	move_item($_,$_+1) foreach (reverse $slist->get_selected_indices);
}

# Move to bottom
sub on_btnEnd1_clicked{
	my $i=scalar @{$slist->{data}}-1;
	move_item($_,$i--) foreach (reverse $slist->get_selected_indices);
}

# Quit
sub gtk_main_quit { &quit; }

